model Position {
  id            Int              @id @default(autoincrement())
  position_name String
  description   String?
  employees     Employee[]
}

model WorkingLocation {
  id            Int              @id @default(autoincrement())
  location_name String
  description   String?
  employees     Employee[]
}

model Employee {
  id                   Int                   @id @default(autoincrement())
  first_name           String
  last_name            String
  email                String
  position_id          Int?
  start_date           DateTime?
  profile_image        String?
  manager_id           Int?
  department_id        Int?
  living_address       String?
  working_location_id  Int?
  position             Position?             @relation(fields: [position_id], references: [id])
  working_location     WorkingLocation?      @relation(fields: [working_location_id], references: [id])
  emergency_contacts   EmergencyContact[]
  paid_time_off_balances PaidTimeOffBalance[]
  time_off_requests    TimeOffRequest[]
  project_assignments   ProjectAssignment[]
  submitted_tickets    Ticket[]
  referrals            Referral[]
  employee_benefits    EmployeeBenefit[]
}

model EmergencyContact {
  id            Int      @id @default(autoincrement())
  employee_id   Int
  contact_name  String
  relationship  String
  phone_number  String
  email         String?
  employee      Employee @relation(fields: [employee_id], references: [id])
}

model PaidTimeOffBalance {
  id            Int      @id @default(autoincrement())
  employee_id   Int
  hours_paid_left Int
  employee      Employee @relation(fields: [employee_id], references: [id])
}

model TimeOffRequest {
  id            Int      @id @default(autoincrement())
  employee_id   Int
  start_date    DateTime
  end_date      DateTime
  hours_requested Int
  request_type  String
  reason        String?
  status        String
  manager_id    Int?
  approved_date DateTime?
  denied_reason  String?
  employee      Employee @relation(fields: [employee_id], references: [id])
}

model Client {
  id            Int      @id @default(autoincrement())
  client_name   String
  spending      Float
  projects_count Int
  status        String
  progress_status String
  client_health String
  client_contacts ClientContact[]
  projects      Project[]
}

model ClientContact {
  id            Int      @id @default(autoincrement())
  client_id     Int
  contact_name  String
  contact_email String
  contact_phone String
  contact_address String?
  client        Client   @relation(fields: [client_id], references: [id])
}

model Project {
  id            Int      @id @default(autoincrement())
  client_id     Int
  project_name  String
  start_date    DateTime
  end_date      DateTime?
  status        String
  description   String?
  project_documents ProjectDocument[]
  project_assignments ProjectAssignment[]
  client        Client   @relation(fields: [client_id], references: [id])
}

model ProjectDocument {
  id            Int      @id @default(autoincrement())
  project_id    Int
  document_name  String
  document_url   String
  visibility     String
  version_number String
  change_description String?
  previous_version_id Int?
  uploaded_by    Int
  upload_date    DateTime
  project        Project   @relation(fields: [project_id], references: [id])
  uploader       Employee  @relation(fields: [uploaded_by], references: [id])
}

model ProjectAssignment {
  id            Int      @id @default(autoincrement())
  project_id    Int
  employee_id    Int
  allocation_percentage Int
  assigned_date  DateTime
  end_date      DateTime?
  project       Project   @relation(fields: [project_id], references: [id])
  employee      Employee  @relation(fields: [employee_id], references: [id])
}

model StaffingRequest {
  id            Int      @id @default(autoincrement())
  project_id    Int
  change_type   String
  employee_id    Int
  requested_by  Int
  status        String
  project       Project   @relation(fields: [project_id], references: [id])
  employee      Employee  @relation(fields: [employee_id], references: [id])
  requester     Employee  @relation(fields: [requested_by], references: [id])
}

model SystemAdministrator {
  id            Int      @id @default(autoincrement())
  employee_id   Int
  employee      Employee  @relation(fields: [employee_id], references: [id])
}

model AdminRole {
  id            Int      @id @default(autoincrement())
  role_name     String
  description   String?
  system_admin_roles SystemAdminRole[]
}

model SystemAdminRole {
  id                Int      @id @default(autoincrement())
  system_admin_id   Int
  role_id           Int
  system_admin      SystemAdministrator @relation(fields: [system_admin_id], references: [id])
  role              AdminRole @relation(fields: [role_id], references: [id])
}

model Ticket {
  id                Int      @id @default(autoincrement())
  submitted_by     Int
  ticket_type_id    Int
  description      String
  priority_level_id Int
  status           String
  assigned_to      Int
  submitted_date   DateTime
  closed_date      DateTime?
  due_date         DateTime?
  submitter        Employee @relation(fields: [submitted_by], references: [id])
  assigned         SystemAdministrator @relation(fields: [assigned_to], references: [id])
}

model TicketStatus {
  id                Int      @id @default(autoincrement())
  ticket_id        Int
  status           String
  changed_by       Int
  change_date      DateTime
  ticket           Ticket @relation(fields: [ticket_id], references: [id])
  changer          Employee @relation(fields: [changed_by], references: [id])
}

model TicketComment {
  id                Int      @id @default(autoincrement())
  ticket_id        Int
  comment_by       Int
  comment_text     String
  comment_date     DateTime
  ticket           Ticket @relation(fields: [ticket_id], references: [id])
  commenter        Employee @relation(fields: [comment_by], references: [id])
}

model TicketType {
  id            Int      @id @default(autoincrement())
  type_name     String
  description   String?
}

model PriorityLevel {
  id            Int      @id @default(autoincrement())
  priority_name String
  resolution_time Int
}

model Benefit {
  id            Int      @id @default(autoincrement())
  benefit_name  String
  benefit_type  String
  description   String?
  price         Float
}

model EmployeeBenefit {
  id            Int      @id @default(autoincrement())
  employee_id   Int
  benefit_id    Int
  is_paid_by_company Boolean
  start_date    DateTime?
  end_date      DateTime?
  price         Float
  employee      Employee @relation(fields: [employee_id], references: [id])
  benefit       Benefit @relation(fields: [benefit_id], references: [id])
}

model Referral {
  id            Int      @id @default(autoincrement())
  referred_by   Int
  candidate_id  Int
  job_offer_id  Int
  status        String
  referral_date DateTime
  referral_reward_status Boolean
  referrer      Employee @relation(fields: [referred_by], references: [id])
}

model CandidateTest {
  id            Int      @id @default(autoincrement())
  candidate_id  Int
  test_data     String
  completion_date DateTime
  test_status   String
  reviewed_by   Int?
  review_comments String?
}
